{"version":3,"sources":["../src/rn-driver.spec.js"],"names":["describe","driver","it","MyDriver","component","require","default","render","text","expect","toBe","path","isRelativePathFromRoot","commonjs","beforeEach","style","fontSize","backgroundColor","customStyles","toEqual","irrelevant","height","tapSpy","jasmine","createSpy","onTap","tap","toHaveBeenCalled","tapOn","byId","props","children","stylesById","RNDriver"],"mappings":"kjBAAA,uC;;AAEAA,SAAS,gBAAT,EAA2B,YAAM;AAC/B,MAAIC,eAAJ;;AAEAC,KAAG,yBAAH,EAA8B,YAAM;AAClCD,aAAS,IAAIE,QAAJ,CAAa;AACpBC,iBAAWC,QAAQ,4CAAR,EAAsDC,OAD7C,EAAb,CAAT;;;AAIAL,WAAOM,MAAP,CAAc,EAACC,MAAM,MAAP,EAAd;;AAEAC,WAAOR,OAAOO,IAAd,EAAoBE,IAApB,CAAyB,WAAzB;AACD,GARD;;AAUAR,KAAG,yBAAH,EAA8B,YAAM;AAClCD,aAAS,IAAIE,QAAJ,CAAa;AACpBQ,YAAK,qDADe;AAEpBC,8BAAwB,KAFJ;AAGpBC,gBAAU,IAHU,EAAb,CAAT;;;AAMAZ,WAAOM,MAAP,CAAc,EAACC,MAAM,MAAP,EAAd;;AAEAC,WAAOR,OAAOO,IAAd,EAAoBE,IAApB,CAAyB,WAAzB;AACD,GAVD;;AAYAV,WAAS,mBAAT,EAA8B,YAAM;;AAElC,QAAIC,eAAJ;AACAa,eAAW,YAAM;AACfb,eAAS,IAAIE,QAAJ,CAAa;AACpBC,mBAAWC,QAAQ,4CAAR,EAAsDC,OAD7C,EAAb,CAAT;;AAGD,KAJD;;AAMAJ,OAAG,8BAAH,EAAmC,YAAM;AACvCD,aAAOM,MAAP,CAAc,EAACQ,OAAO;AACpBC,oBAAU,EADU;AAEpBC,2BAAiB,OAFG,EAAR,EAAd;;;AAKAR,aAAOR,OAAOiB,YAAd,EAA4BC,OAA5B,CAAoC;AAClCH,kBAAU,EADwB;AAElCC,yBAAiB,OAFiB,EAApC;;AAID,KAVD;;AAYAf,OAAG,6BAAH,EAAkC,YAAM;AACtCD,aAAOM,MAAP,CAAc,EAACQ,OAAO;AACpB;AACEC,oBAAU,EADZ;AAEEC,2BAAiB,OAFnB,EADoB;;AAKpB;AACED,oBAAU,EADZ,EALoB;;AAQpB,iBAAS;AACPI,sBAAY,6BADL,EARW;;AAWpB,gBAAQ;AACNC,kBAAQ,EADF,EAXY,CAAR,EAAd;;;;;AAiBAZ,aAAOR,OAAOiB,YAAd,EAA4BC,OAA5B,CAAoC;AAClCH,kBAAU,EADwB;AAElCK,gBAAQ,EAF0B;AAGlCJ,yBAAiB,OAHiB,EAApC;;AAKD,KAvBD;;AAyBAf,OAAG,cAAH,EAAmB,YAAM;AACvB,UAAMoB,SAASC,QAAQC,SAAR,CAAkB,KAAlB,CAAf;AACAvB,aAAOM,MAAP,CAAc,EAACC,MAAM,MAAP,EAAeiB,OAAOH,MAAtB,EAAd;AACArB,aAAOyB,GAAP;AACAjB,aAAOa,MAAP,EAAeK,gBAAf;AACD,KALD;;AAOD,GArDD;AAsDD,CA/ED,E;;;AAkFMxB,Q;;;;;AAKE;AACJ,WAAKyB,KAAL,CAAW,QAAX;AACD,K,uCANU,CACT,OAAO,KAAKC,IAAL,CAAU,QAAV,EAAoBC,KAApB,GAA4BC,QAAnC,CACD,C;;AAMkB;AACjB,aAAO,KAAKC,UAAL,CAAgB,qBAAhB,CAAP;AACD,K,uBAXoBC,kB","file":"rn-driver.spec.js","sourcesContent":["import RNDriver from './rn-driver';\n\ndescribe('rn driver test', () => {\n  let driver;\n\n  it('should render component', () => {\n    driver = new MyDriver({\n      component: require('../test/mocks/dummy-react-native-component').default,\n    });\n\n    driver.render({text: 'yoba'});\n\n    expect(driver.text).toBe('It works!');\n  });\n\n  it('should support commonjs', () => {\n    driver = new MyDriver({\n      path:'../test/mocks/dummy-react-native-component-commonjs',\n      isRelativePathFromRoot: false,\n      commonjs: true\n    })\n\n    driver.render({text: 'yoba'});\n\n    expect(driver.text).toBe('It works!');\n  })\n\n  describe('getStylesByTestId', () => {\n\n    let driver;\n    beforeEach(() => {\n      driver = new MyDriver({\n        component: require('../test/mocks/dummy-react-native-component').default,\n      });\n    });\n\n    it('should support simple styles', () => {\n      driver.render({style: {\n        fontSize: 12,\n        backgroundColor: 'black'\n      }});\n\n      expect(driver.customStyles).toEqual({\n        fontSize: 12,\n        backgroundColor: 'black'\n      });\n    });\n\n    it('should support style arrays', () => {\n      driver.render({style: [\n        {\n          fontSize: 12,\n          backgroundColor: 'black'\n        },\n        {\n          fontSize: 13\n        },\n        false && {\n          irrelevant: 'false does not get included'\n        },\n        true && {\n          height: 15\n        }\n      ]\n      });\n\n      expect(driver.customStyles).toEqual({\n        fontSize: 13,\n        height: 15,\n        backgroundColor: 'black'\n      });\n    });\n\n    it('should tapOn', () => {\n      const tapSpy = jasmine.createSpy('tap');\n      driver.render({text: 'yoba', onTap: tapSpy});\n      driver.tap();\n      expect(tapSpy).toHaveBeenCalled();\n    });\n\n  });\n});\n\n\nclass MyDriver extends RNDriver {\n  get text() {\n    return this.byId('myText').props().children;\n  }\n\n  tap() {\n    this.tapOn('myText');\n  }\n\n  get customStyles() {\n    return this.stylesById('textWithCustomStyle');\n  }\n}\n"]}