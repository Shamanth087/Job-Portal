'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _baseDriver = require('./base-driver');var _baseDriver2 = _interopRequireDefault(_baseDriver);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

describe('base driver test', function () {
  var driver = void 0;

  beforeEach(function () {
    driver = new MyDriver({
      path: '../test/mocks/dummy-component',
      isRelativePathFromRoot: false });

  });

  it('should render component', function () {
    driver.render({ text: 'yoba' });
    expect(driver.text).toBe('It works!');
    expect(driver.textValue).toBe('It works!');
  });

  it('should get props', function () {
    driver.render({ text: 'yoba', style: { color: 'red' } });
    expect(driver.textProps.style).toEqual({ color: 'red' });
  });

  it('should render children on request', function () {
    var childText = 'Hello there';
    driver.render({ childText: childText });
    var child = driver.renderChild('child-component');
    expect(child.propsOf('child-component-text').children).toEqual(childText);
  });

  describe('base driver state', function () {
    var driver = void 0;

    beforeEach(function () {
      driver = new MyDriver({
        path: '../test/mocks/dummy-class-component',
        isRelativePathFromRoot: false });

    });

    it('should see the initial state', function () {
      driver.render();

      expect(driver.state).toEqual({});
      expect(driver.text).not.toBeDefined();

    });

    it('should set the state', function () {
      driver.render();
      driver.setState({ theStateIs: 'good' });

      expect(driver.state.theStateIs).toEqual('good');
      expect(driver.text).toEqual('good');
    });

  });

});var

MyDriver = function (_BaseDriver) {_inherits(MyDriver, _BaseDriver);function MyDriver() {_classCallCheck(this, MyDriver);return _possibleConstructorReturn(this, (MyDriver.__proto__ || Object.getPrototypeOf(MyDriver)).apply(this, arguments));}_createClass(MyDriver, [{ key: 'text', get: function get()
    {
      return this.byId('myText').props().children;
    } }, { key: 'textValue', get: function get()

    {
      return this.childrenOf('myText');
    } }, { key: 'textProps', get: function get()

    {
      return this.propsOf('myText');
    } }]);return MyDriver;}(_baseDriver2.default);
//# sourceMappingURL=base-driver.spec.js.map