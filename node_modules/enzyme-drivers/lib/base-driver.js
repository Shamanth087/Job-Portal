'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _enzyme = require('enzyme');var _enzyme2 = _interopRequireDefault(_enzyme);
var _react = require('react');var _react2 = _interopRequireDefault(_react);


var _enzymeAdapterReact = require('enzyme-adapter-react-16');var _enzymeAdapterReact2 = _interopRequireDefault(_enzymeAdapterReact);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}
_enzyme2.default.configure({ adapter: new _enzymeAdapterReact2.default() });var

BaseDriver = function () {

  function BaseDriver(_ref)
  {var path = _ref.path,mocks = _ref.mocks,_ref$isRelativePathFr = _ref.isRelativePathFromRoot,isRelativePathFromRoot = _ref$isRelativePathFr === undefined ? true : _ref$isRelativePathFr,_ref$rootFolder = _ref.rootFolder,rootFolder = _ref$rootFolder === undefined ? 'src/' : _ref$rootFolder,_ref$targetImport = _ref.targetImport,targetImport = _ref$targetImport === undefined ? 'default' : _ref$targetImport,commonjs = _ref.commonjs,component = _ref.component;_classCallCheck(this, BaseDriver);
    if (!component) {
      if (mocks) {
        throw Error("mocks are deprecated");
      }
      this.rootFolder = rootFolder;
      this.targetImport = targetImport;
      this.path = isRelativePathFromRoot ? '../../../' + this.rootFolder + path : path;
      this.commonjs = commonjs;
    } else {
      this._component = component;
    }
  }_createClass(BaseDriver, [{ key: 'render', value: function render(

    props) {
      if (!this._component) {
        var ComponentModule = require(this.path);
        this._component = this.commonjs ? ComponentModule : ComponentModule[this.targetImport];
      }
      this.component = (0, _enzyme.shallow)(_react2.default.createElement(this._component, props));
      return this;
    } }, { key: 'renderChild', value: function renderChild(

    testId) {
      var child = this.byId(testId).getElement();
      return new BaseDriver({ component: child.type }).render(child.props);
    } }, { key: 'getElementByTestId', value: function getElementByTestId(

    testId) {
      console.warn('--- DEPRECATED --- getElementByTestId is deprecated. use byId instead'); // eslint-disable-line
      return this.byId(testId);
    } }, { key: 'propsOf', value: function propsOf(

    testId) {
      return this.byId(testId).props();
    } }, { key: 'childrenOf', value: function childrenOf(

    testId) {
      return this.propsOf(testId).children;
    } }, { key: 'byId', value: function byId(

    testId) {
      var el = this.component.findWhere(function (node) {return node.prop('testID') === testId;});
      return el;
    } }, { key: 'setState', value: function setState(





    state) {
      this.component.setState(state);
    } }, { key: 'state', get: function get() {return this.component.state();} }]);return BaseDriver;}();exports.default = BaseDriver;
//# sourceMappingURL=base-driver.js.map