'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _rnDriver = require('./rn-driver');var _rnDriver2 = _interopRequireDefault(_rnDriver);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

describe('rn driver test', function () {
  var driver = void 0;

  it('should render component', function () {
    driver = new MyDriver({
      component: require('../test/mocks/dummy-react-native-component').default });


    driver.render({ text: 'yoba' });

    expect(driver.text).toBe('It works!');
  });

  it('should support commonjs', function () {
    driver = new MyDriver({
      path: '../test/mocks/dummy-react-native-component-commonjs',
      isRelativePathFromRoot: false,
      commonjs: true });


    driver.render({ text: 'yoba' });

    expect(driver.text).toBe('It works!');
  });

  describe('getStylesByTestId', function () {

    var driver = void 0;
    beforeEach(function () {
      driver = new MyDriver({
        component: require('../test/mocks/dummy-react-native-component').default });

    });

    it('should support simple styles', function () {
      driver.render({ style: {
          fontSize: 12,
          backgroundColor: 'black' } });


      expect(driver.customStyles).toEqual({
        fontSize: 12,
        backgroundColor: 'black' });

    });

    it('should support style arrays', function () {
      driver.render({ style: [
        {
          fontSize: 12,
          backgroundColor: 'black' },

        {
          fontSize: 13 },

        false && {
          irrelevant: 'false does not get included' },

        true && {
          height: 15 }] });




      expect(driver.customStyles).toEqual({
        fontSize: 13,
        height: 15,
        backgroundColor: 'black' });

    });

    it('should tapOn', function () {
      var tapSpy = jasmine.createSpy('tap');
      driver.render({ text: 'yoba', onTap: tapSpy });
      driver.tap();
      expect(tapSpy).toHaveBeenCalled();
    });

  });
});var


MyDriver = function (_RNDriver) {_inherits(MyDriver, _RNDriver);function MyDriver() {_classCallCheck(this, MyDriver);return _possibleConstructorReturn(this, (MyDriver.__proto__ || Object.getPrototypeOf(MyDriver)).apply(this, arguments));}_createClass(MyDriver, [{ key: 'tap', value: function tap()




    {
      this.tapOn('myText');
    } }, { key: 'text', get: function get() {return this.byId('myText').props().children;} }, { key: 'customStyles', get: function get()

    {
      return this.stylesById('textWithCustomStyle');
    } }]);return MyDriver;}(_rnDriver2.default);
//# sourceMappingURL=rn-driver.spec.js.map