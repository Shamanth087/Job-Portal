{"version":3,"sources":["../src/base-driver.spec.js"],"names":["describe","driver","beforeEach","MyDriver","path","isRelativePathFromRoot","it","render","text","expect","toBe","textValue","style","color","textProps","toEqual","childText","child","renderChild","propsOf","children","state","not","toBeDefined","setState","theStateIs","byId","props","childrenOf","BaseDriver"],"mappings":"kjBAAA,2C;;AAEAA,SAAS,kBAAT,EAA6B,YAAM;AACjC,MAAIC,eAAJ;;AAEAC,aAAW,YAAM;AACfD,aAAS,IAAIE,QAAJ,CAAa;AACpBC,YAAM,+BADc;AAEpBC,8BAAwB,KAFJ,EAAb,CAAT;;AAID,GALD;;AAOAC,KAAG,yBAAH,EAA8B,YAAM;AAClCL,WAAOM,MAAP,CAAc,EAACC,MAAM,MAAP,EAAd;AACAC,WAAOR,OAAOO,IAAd,EAAoBE,IAApB,CAAyB,WAAzB;AACAD,WAAOR,OAAOU,SAAd,EAAyBD,IAAzB,CAA8B,WAA9B;AACD,GAJD;;AAMAJ,KAAG,kBAAH,EAAuB,YAAM;AAC3BL,WAAOM,MAAP,CAAc,EAACC,MAAM,MAAP,EAAeI,OAAO,EAACC,OAAO,KAAR,EAAtB,EAAd;AACAJ,WAAOR,OAAOa,SAAP,CAAiBF,KAAxB,EAA+BG,OAA/B,CAAuC,EAACF,OAAO,KAAR,EAAvC;AACD,GAHD;;AAKAP,KAAG,mCAAH,EAAwC,YAAM;AAC5C,QAAMU,YAAY,aAAlB;AACAf,WAAOM,MAAP,CAAc,EAACS,oBAAD,EAAd;AACA,QAAMC,QAAQhB,OAAOiB,WAAP,CAAmB,iBAAnB,CAAd;AACAT,WAAOQ,MAAME,OAAN,CAAc,sBAAd,EAAsCC,QAA7C,EAAuDL,OAAvD,CAA+DC,SAA/D;AACD,GALD;;AAOAhB,WAAS,mBAAT,EAA8B,YAAM;AAClC,QAAIC,eAAJ;;AAEAC,eAAW,YAAM;AACfD,eAAS,IAAIE,QAAJ,CAAa;AACpBC,cAAM,qCADc;AAEpBC,gCAAwB,KAFJ,EAAb,CAAT;;AAID,KALD;;AAOAC,OAAG,8BAAH,EAAmC,YAAM;AACvCL,aAAOM,MAAP;;AAEAE,aAAOR,OAAOoB,KAAd,EAAqBN,OAArB,CAA6B,EAA7B;AACAN,aAAOR,OAAOO,IAAd,EAAoBc,GAApB,CAAwBC,WAAxB;;AAED,KAND;;AAQAjB,OAAG,sBAAH,EAA2B,YAAM;AAC/BL,aAAOM,MAAP;AACAN,aAAOuB,QAAP,CAAgB,EAACC,YAAY,MAAb,EAAhB;;AAEAhB,aAAOR,OAAOoB,KAAP,CAAaI,UAApB,EAAgCV,OAAhC,CAAwC,MAAxC;AACAN,aAAOR,OAAOO,IAAd,EAAoBO,OAApB,CAA4B,MAA5B;AACD,KAND;;AAQD,GA1BD;;AA4BD,CAxDD,E;;AA0DMZ,Q;AACO;AACT,aAAO,KAAKuB,IAAL,CAAU,QAAV,EAAoBC,KAApB,GAA4BP,QAAnC;AACD,K;;AAEe;AACd,aAAO,KAAKQ,UAAL,CAAgB,QAAhB,CAAP;AACD,K;;AAEe;AACd,aAAO,KAAKT,OAAL,CAAa,QAAb,CAAP;AACD,K,uBAXoBU,oB","file":"base-driver.spec.js","sourcesContent":["import BaseDriver from './base-driver';\n\ndescribe('base driver test', () => {\n  let driver;\n\n  beforeEach(() => {\n    driver = new MyDriver({\n      path: '../test/mocks/dummy-component',\n      isRelativePathFromRoot: false\n    });\n  });\n\n  it('should render component', () => {\n    driver.render({text: 'yoba'});\n    expect(driver.text).toBe('It works!');\n    expect(driver.textValue).toBe('It works!');\n  });\n\n  it('should get props', () => {\n    driver.render({text: 'yoba', style: {color: 'red'}});\n    expect(driver.textProps.style).toEqual({color: 'red'});\n  });\n\n  it('should render children on request', () => {\n    const childText = 'Hello there';\n    driver.render({childText});\n    const child = driver.renderChild('child-component');\n    expect(child.propsOf('child-component-text').children).toEqual(childText)\n  });\n\n  describe('base driver state', () => {\n    let driver;\n\n    beforeEach(() => {\n      driver = new MyDriver({\n        path: '../test/mocks/dummy-class-component',\n        isRelativePathFromRoot: false\n      });\n    });\n\n    it('should see the initial state', () => {\n      driver.render();\n\n      expect(driver.state).toEqual({});\n      expect(driver.text).not.toBeDefined();\n\n    });\n\n    it('should set the state', () => {\n      driver.render();\n      driver.setState({theStateIs: 'good'});\n\n      expect(driver.state.theStateIs).toEqual('good');\n      expect(driver.text).toEqual('good');\n    });\n\n  });\n\n});\n\nclass MyDriver extends BaseDriver {\n  get text() {\n    return this.byId('myText').props().children;\n  }\n\n  get textValue() {\n    return this.childrenOf('myText');\n  }\n\n  get textProps() {\n    return this.propsOf('myText');\n  }\n}\n"]}